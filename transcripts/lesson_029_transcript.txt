 Okay, now we're going to talk about AI prompting and how to expedite development by utilizing AI. In my opinion, and I've spoke to Blake Anderson about this, the reason apps have blown up recently and the reason we've all got very rich and successful off of it is because AI has lowered the barriers to entry significantly. It saves a lot of time. It's super smart and like you can build and test and validate things at lightning speed. Here is a bunch of charity prompts that you can use. We'll be using this first one to begin this tutorial and there's a bunch of other ones that are very simple. Like make a poor to refresh list and SwiftUI or create a SwiftUI button with a spring bounce animation when tapped. These are all like really simple prompts but they work. And instead of like needing to learn to learn to code like knowing what ins and outs this and that, you can just ask check GPT to build it for you. And as long as you have like a fundamental understanding of how Swift and how code works, you can build anything. So we use that a lot in Quitter. We use a lot to expedite my work with the community. Like most of the community functions, built by AI. I mean, I understand how they work now but like I didn't initially and it just did it for me and now we have a fucking working community that has a thousand posts a day. So it really does work. And usually the more detailed the better, as you can see this prompt that we're going to use for the beginning of the tutorial, I want to build a UMACS clone in SwiftUI. Okay, very explicit. Then UMACS is an app where you can take a picture of your face and it will rate your looks out of ten. This should be out of 100. Yeah, that should be right. This image should be passed to the OpenAI API via MacPause repository and the results should display on the front end. If you coded before you can understand what it means by results front end, whatever, and repository, very simple. I will explain later. The scores that should give you are overall rating, potential, masculinity, skin quality and jawline and anchiko, sorry. So this is exactly what UMACS has. So I'll just pull up there right now. Oh shit. As you can see, there is an overall, there's a potential, masculinity, skin quality, jawline and cheekbones. And it's just his face and that image is rated by ChatGbT. Very, very simple stuff. So yeah, that's the problem I'm going to give ChatGbT in the next section of this tutorial. But usually just the general rule is like the more explicit the better. It always share information about your tech stack. So let's, for example, say I'm using Firebase or I'm using OpenAI instead of Claude or Gemini. And also if it doesn't, if you copy paste the code into your IDE and what you kind of expect it or it's not kind of functioning how you want it to function, just say change this. It's doing one thing, but I want it to do another thing instead. And ChatGbT will be very fast to fix it and you can like move a lightning speed. And I'm going to show you how fast we can build a UX competitor right now. So let's get into it.