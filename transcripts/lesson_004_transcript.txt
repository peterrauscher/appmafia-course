 All right, welcome back, lesson 1.0.1, idea versus execution. Quick note, you might see that my camera is like, might be a different size. I don't know, there might be production inconsistencies throughout this course. Admittedly, I'm not an expert on production quality, but I am an expert on coming up with great ideas for apps. So let's talk about that. Idea versus execution is as classic and old a debate as chicken versus egg when it comes to business. So what matters more by non-answer, but the honest truth of it is that they matter equally. They're honestly just different things. Your idea will determine the outcome curve of your applied execution. Whereas your execution will determine where you land on that curve. Execution is the input. The idea is the structure of the equation itself. For those of you that aren't familiar with the term curve, curve essentially just means equation. It just means like what is the sort of possible set of outcomes look like based on your amount of input. Okay, so good idea. You will get more outcome per unit of input or how well you execute relative to a bad idea. This should be pretty self evident. But as usual, there are virtually infinite shapes of this curve. It's not so one dimensional. So you can work on ideas that are exponential. Social apps often take this form factor. If you execute really well, you see this like incredible exponential outcome when you have higher attention, high K factor. But if you don't execute well, the outcome is most likely to be low. The thing that's often difficult here is it's pretty difficult to see the difference between this curve right here for exponential and a bad idea. So you might think that you're in the early stages of what will be exponential. Right? See it at four units of execution. We see about the same sort of outcome output. But you don't know if you're close to take off exponential growth or if you're dead on arrival. In my experience. Man, it really depends. But in my experience, I try to target fast growth or at the very minimum, these sort of good idea, linearly, linearly tracking up. As you become more skilled as an entrepreneur, builder, just business person as a whole, you'll be able to more easily recognize the difference between exponential and bad. And so you'll be able to kind of work on products with a longer time horizon and larger feedback loops. And so as you see here, as with most maximum in business, this is still an oversimplification. Because it's just like your execution is so multi-dimensional, there's so many factors that go into it, the amount of resources that you have to play, what your time horizon looks like, which I think actually brings us to here. And coming up with the best possible idea, these are questions that are extremely important to have very clear answers to. What is your desired outcome? Do you care more about the problem that you are solving or the reward that you get for solving it? A good litmus test here is, you know, if you worked on the problem for 10 years and you never made much money from it, maybe just enough to last, would you be happy? On the other hand, like instead of doing that, would you prefer to ignore that problem and just take a million dollars right now? If your answer is the latter, you probably care a little bit more about the reward that you get for solving it. It doesn't mean that you don't work on problems that you don't still care about, but just that, you know, maybe you do care about making a lot of money. And that's like, there's no harm in that. The harm is when, you know, you make you sacrifice and take immoral action for the pursuit of it, right? But in and of itself wanting to make money is not a bad thing. What's your timeline? Do you need to make the money in the next three months? Or can you work on it for a year? Two years before you make any cash. When I first got started off, my timeline was zero, dude. Like I needed to make money as quickly as possible. I'd like $2,000 in my bank account, but all of that into RISGPT. My brother was giving me loans for groceries. There was no runway. My entire goal with RISGPT, my entire goal was to make $50,000 over the course of 12 months, just so that I could continue to pay living expenses so that I could keep being an entrepreneur. I actually have this written down. And there's, I have a tweet about it on my Twitter. Anyways, what are your resources and constraints? Now similar to timeline, it's like, do you have a lot of capital to invest? That might be one of your resources. Your constraint might be that you only have three hours a day free. Maybe you still have to work a full-time job. Maybe you have a family. Maybe you're a student. So these are very, very important problems to identify because these will impact your problem identification. Or you want to consider these things ahead of time. If you want to build something that is technically very, very, very difficult, then you're going to want more resources with regards to engineering capabilities. Either you or a co-founder or whomever need to be very skilled. You know, if your resource is, you know, you have a lot of money, maybe you can pursue problems that generally require significantly more capital to get going and have a longer development timeline. So yeah, identify your resources and constraints and we'll touch on kind of these specific things in a second. And then additionally, you want to consider what the curve looks like, right? Based on timeline, you might pursue different sort of outcome curves. Okay, so let's get tangible here. RizGPT and UMACS grew fast but flatlined. The goal with both of those products was how do I start making money as quickly as possible? Because I don't have cash to continue putting in or even cash to continue paying for my living expenses. And so as a result, I identified problems that I thought I could solve very easily, both with regards to the amount of capital invested and the amount of engineering difficulty. RizGPT was a significantly easier engineering product than UMACS was. So as my capabilities as an engineer increased, I'd like to think that I was like one of the first vibe coders, because AI actually wrote the vast majority of the code for both RizGPT and UMACS. But as my technical abilities increased, so did the technical complexity of the products that I worked on. Now, after UMACS had kind of blew up and was doing really well, that came to me and he was like, I want to build an app with you. And he sent me a list of ideas. And so at this point in time, I knew that I was going to make over a million dollars in profit from my products. And so when he sent a list of ideas, also this should say plug. Sorry about that. But Zach sent me a list of ideas and I said to him, I was like, listen, I want to work on something that has more upside. Otherwise, it's not going to be worth my time at all. And so I went through his list of ideas and there were a number that were more similar to RizGPT and UMACS in total possible outcome. But I saw a calorie tracker was included and I said, I want to work on this. Or this is what we should work on together. I just want you to know that we're probably not going to see the same takeoff as UMACS. UMACS hit over $700,000 in monthly revenue within two months. Now, I always kind of knew that that was possible given the state of that niche and the virality of the product. With Cal AI, we were going against an incumbent. We were working with a relatively rudimentary technology. We required more capital, more engineering resources, and more overall effort to get it to grow. But it had much higher upside because if we could get to the point of really competing with my fitness pal, they were making, I think, $20 million a month at the time and I think that they still are. I knew that it was a bigger market as a whole, right? A product that more people are willing to pay for. Calorie tracking is just objectively bigger than like facial analysis looks maxing. It might not be forever, who knows, but at the time that was the case. And so these projects went exactly as I expected. I know with other projects I miscalculated a story I have not told too much was the college marketplace app that I built before risk GPT. This was a grave and major miscalculation. Alex Lyman, my co-founder and I and then Evan Dre as well joined later as a co-founder identified the problem on college campuses of the fact that students were using group me to buy and sell use clothing. And there were a number of, I think, false premises on which we operated. But not the least of which was that we were trying to build a local social marketplace. This is one of the most common pitfalls of new app developers, which is I identify this problem in my local community. So I will solve it for my local community. But it's extremely hard. Because not only is it social, but you're also constrained by geography. So you have to create pervasive sort of use within individual bubbles and then across bubbles as well. So when you scale up at different schools, in this case for our college marketplace, we had to go figure out how to solve the cold start problem again and again. Now, there are benefits to this. If you solve it, you know, you've got a strong moat, but we didn't realize how difficult it would be. So we put over a year into the project. We launched at two lane and went reasonably well. Then we went to other schools and it kind of was dead on arrival. It just didn't really grow. We didn't have the same level of connections. The product didn't have high retention. We did not have a high K factor. It was solving a relatively minor problem, which I'm actually going to touch on in the next section. Miscalculations can cause you years of your life. Seriously, it's like you pick the wrong product. You don't identify this curve. Well, right. We were operating within either exponential or bad idea curve. In retrospect, it was clearly bad idea. We kept telling ourselves that it was exponential. So this lesson is very theoretical about determining what ideas to work on, but it is overwhelmingly important. I like. I actually experienced this problem. It leaves him out when people come to me and they're like, hey, I have this idea for an app. Can I get your thoughts? And I want to support them and be a positive influence and be like, you got it, man. You're going to, you're going to fucking, you know, you're going to succeed and they start working on it. And they think that it's going to be exponential. But the whole time I'm like, it's not a good idea. And. It's hard because that, you know, I don't really know how to say it straight. Like, dude, you should work on something else. But I try my best to do that. I'm actually really grateful for the college marketplace app that we built. And I think that's when everyone else is just positive. Like, you're going to do it, bro. We believe in you. A successful entrepreneur, Harry Gestetner. He was a good friend, great guy. He was like, guys, I would, I would fucking move on. And we moved on. And I'm actually like, it was one of the best decisions of my life because it led to everything else that occurred after the fact building risk, GPT and then all the future products. And so these are all important questions to kind of ask yourself. And I think I started to touch into this. But as you come up with the idea, you start brainstorming. You got to ask yourself, like, what is the execution going to tangibly look like here? So similar to the resources and constraints in terms of, you know, the tangible resources, time, money, whatever it may be. You need to look at the subset of skills that are required. Right. What does your team have? What do you have? Okay. So for social apps. As I gave the example of the college marketplace app I built called Holly. To be honest, Alex, Evan and I, we were all very, very good at distribution as has become evident with the products that we've built since specifically social media distribution. But what we weren't very good at was design and development. I actually kind of forgot this, but I have this stuff written out here. So, so we weren't very good at design development, which are extremely important for social apps. You might think that social apps are distribution heavy, but that's actually not the case. A properly built social app will have high k factor and higher attention, which are design and development challenges rather than distribution. If you build the social app right, and you advertise it correctly, it'll kind of continue to grow on its own. Now emerging markets are largely designed and distribution heavy. It's just UMax and RizGPT. The reason that they're not development heavy is because I mean, it's a new, you're building a new product. Sure, you need to get it to work. And sometimes it will be development heavy if it's like leveraging a very, very new technology that's technically sophisticated. But more often than not in this consumer domain. It's design heavy, not in that you need amazing UI, but you need great UX, right? If it's an emerging market, if it's a new product where there does not exist, exist precedent on how to build it and what it should look like, you have to kind of pioneer that on your own. So this was once again RizGPT and UMax, we pioneered the UX. There was a little bit of precedent that we borrowed on, but it was more design heavy UX specifically. And then distribution should be obvious for emerging sectors, specifically for like utility apps is what I'm referring to with a commercial legacy, social being its own utility meaning single player. Distribution heavy because you're producing a product that nobody really knows about. So you're going to have to figure out how to convince people why they should download it. First, you need to figure out how to put in front of their face, make it interesting enough for people to engage with on social media or other platforms. And then second, you have to figure out how to convert them to actually download a pet. Now, legacy sectors, this would be an example of Cal AI. Cal AI was a mix between legacy and emerging. So like the market itself of calorie tracking was legacy, but then the AI component was emerging. So it was new. But if you're competing with incumbents, it's often development or engineering heavy because you need to build a really great product. If there are already existing products on the market and yours isn't at least as good on a product side of things, it's not going to not going to grow usually. It's less design heavy because you have precedent. You can go find that comparable product, take the screenshots, put it in Figma. And there's less innovation required if you're just competing with already existing companies. This is kind of like the idea of like second moveers advantage. I do not recommend being a copycat. And there are a lot of reasons for that that will likely touch on in the future. But if you are going to be competing with incumbents, your development does have to be on point. And then of course, distribution has to be on point because people probably already know about the existing product. And so you have to figure out how to kind of out distribute them. Finish up on the story about the college marketplace app and risk GBT. You know, wrong subset of skills, wrong product idea. This I think genuinely just shows the power of working on the right idea and properly determining expectations. And resources constraints timeline outcome, these sort of questions are so incredibly important. I cannot emphasize them enough. You might be like, this is bullshit. I can't believe I pay for this course. He's just talking that idea of his execution. But it's so real. It's so important. I spent over a year of my life working on the wrong thing because I did not really understand all what I just spoke about. And then I changed and I hit 80 KMRR in three fucking days. Please, please, please, whatever you do, take this message to heart, take this unit to heart. This is the very foundation of the framework that you should use when determining what ideas to work on. All right. In the next section, we're going to get into human psychology and how to actually begin identifying the ideas with which you can apply these frameworks to. Peace out.